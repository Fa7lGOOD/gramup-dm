{"version":3,"sources":["instagram/connector.js","instagram/service.js","components/List.js","components/Dialog.js","components/SendMessage.js","App.js","serviceWorker.js","index.js"],"names":["chrome","window","InstagramError","status","_this","message","arguments","length","undefined","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","concat","Error","TimeoutError","NotInstalledError","connector","_currend_id","_instaweb_dev_id","_instaweb_id","isStopped","isConnected","_check_working_id","Promise","resolve","reject","setTimeout","runtime","sendMessage","_this2","method","_ref3","pong","_ref4","init","_callee","regenerator_default","a","wrap","_context","prev","next","sent","t0","abrupt","stop","start","kill","request","data","wake","wasWorking","console","log","error","request_generator","_callee2","_ref6","params","limit","_users","generator","_generator$next","users","_args2","_context2","Infinity","page_generator","toConsumableArray","_callee3","_ref7","_params","payload","_ref8","big_list","next_max_id","rest","_context3","awaitAsyncGenerator","objectWithoutProperties","get_user_info","_ref","asyncToGenerator","mark","username","instagram","_x","apply","get_inbox","_ref2","get_thread","thread_id","thread","_x2","send_direct_item","_ref5","_callee4","text","pk","_context4","user","_x3","_x4","List","_this$props","props","selectedThread","threads","react_default","createElement","className","onClick","selectThread","map","key","thread_title","Component","Dialog","state","isTyping","messages","nextProps","item","Message","id","user_id","me","item_type","setState","isLoading","react_chat_ui_lib","showSenderName","bubblesCentered","bubbleStyles","fontSize","chatbubble","borderRadius","padding","SendMessage","sendMessageRef","React","createRef","handleChange","event","_event$target","target","name","value","defineProperty","submitMessage","preventDefault","ym","onSubmit","react","type","placeholder","onChange","App","autoScroll","messagesEnd","scrollToBottom","force","current","parentNode","scrollTop","offsetTop","loadThread","items","reverse","recipient","alert","viewer","inbox","_this$state","List_List","Dialog_Dialog","SendMessage_SendMessage","style","float","clear","ref","lib","accounts","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9f5a2b3.chunk.js","sourcesContent":["const chrome = window.chrome\n\nclass InstagramError extends Error {\n  constructor(status, message = '') {\n    super(message)\n    this.status = status\n\n    this.message = `InstagramError ${status}: ${message}`\n  }\n}\n\nclass TimeoutError extends Error {}\nclass NotInstalledError extends Error {}\n\nclass InstagramConnector {\n  _currend_id = \"\"\n  // _instaweb_dev_id = \"kakgeanaigaghemcjhohikiblgnflbfl\"\n  _instaweb_dev_id = \"jfeioppjmfoialcnpnecpgdajnionodc\"\n  _instaweb_id = \"njonkbhnmmjgancfbncekpgkmidhbbpo\"\n\n  isStopped = false\n  isConnected = false\n\n  _check_working_id = () => new Promise((resolve, reject) => {\n\n    setTimeout(() => reject(new NotInstalledError(`Cant find any working extension`)), 500)\n\n    chrome.runtime.sendMessage(\n      this._instaweb_id,\n      { method: 'ping' }, null,\n      ({ status, pong } = {}) => status === 'ok' && pong && resolve(this._instaweb_id))\n\n    chrome.runtime.sendMessage(\n      this._instaweb_dev_id,\n      { method: 'ping' }, null,\n      ({ status, pong } = {}) => status === 'ok' && pong && resolve(this._instaweb_dev_id))\n\n  })\n\n  init = async () => {\n    try {\n      this._currend_id = await this._check_working_id()\n\n      this.isConnected = true\n    } catch (err) {\n      if (err instanceof TimeoutError) {\n        this.isConnected = false\n        return\n      }\n\n      throw err\n    }\n\n  }\n\n  start = () => this.isStopped = false\n  kill = () => this.isStopped = true\n\n  request = (data, wake = false) => new Promise((resolve, reject) => {\n    const wasWorking = !this.isStopped\n\n    if (wake && !wasWorking) this.start()\n\n    if (this.isStopped) return reject(new Error(`Request was killed`))\n    if (!this.isConnected) return reject(new NotInstalledError())\n\n    setTimeout(() => reject(new TimeoutError(`Request timeout`)), 10000)\n\n    const onResponse = (message) => {\n      if (!message) return reject(new NotInstalledError())\n\n      const { status, error } = message\n\n      console.log('request', data.method, '->', status, message)\n\n      if (status !== 'ok') {\n        reject(new InstagramError(status, error))\n      } else {\n        resolve(message)\n      }\n    }\n\n    console.log(`send_message`, this._currend_id, data)\n    chrome.runtime.sendMessage(this._currend_id, data, null, onResponse)\n\n    if (wake && !wasWorking) this.kill()\n  })\n\n  request_generator = async function * ({ method, params }, limit = Infinity) {\n    let _users = []\n    let generator = this.page_generator({ method, params })\n\n    do {\n      const { users } = generator.next()\n\n      console.log('users', users)\n\n      _users = [ ..._users, ...users ]\n\n      const shouldStop = yield users\n\n      if (shouldStop || _users.length > limit) {\n        return _users\n      }\n\n    } while(true)\n\n  }\n\n  page_generator = async function * ({ method, params }) {\n    let _params = params\n\n    do {\n      const payload = { method, params: _params }\n      const { big_list, next_max_id, ...rest } = await this.request(payload)\n\n      console.log('big_list', big_list, 'next_max_id', next_max_id)\n\n      const shouldStop = yield rest\n\n      if (shouldStop || !next_max_id) {\n        return\n      }\n\n      _params = [ ...params, next_max_id ]\n\n    } while(true)\n\n  }\n\n}\n\nexport default new InstagramConnector()\n","import instagram from './connector'\n\nexport const get_user_info = async (username) => {\n  return instagram.request({ method: 'get_user_info', params: [username] }, true)\n}\n\nexport const get_inbox = async () => {\n  return instagram.request({ method: 'get_inbox', params: [] }, true)\n}\n\nexport const get_thread = async (thread_id) => {\n  if (!thread_id) return { thread: null }\n  return instagram.request({ method: 'get_thread', params: [ thread_id ] }, true)\n}\n\nexport const send_direct_item = async ({ thread, users, username }, text) => {\n  if (username) {\n    const { user: { pk }} = await get_user_info(username)\n    users = [ pk ]\n  }\n\n  const params = [ 'text', { text, users, thread } ]\n\n  return instagram.request({ method: 'send_direct_item', params }, true)\n}\n","import React, { Component } from 'react'\n\nexport default class List extends Component {\n  render() {\n    const { selectedThread, threads } = this.props\n\n    return (\n      <div className=\"dialog-list\">\n        <div\n          className={!selectedThread ? \"dialog-list-item active\" : \"dialog-list-item\"}\n          onClick={() => this.props.selectThread()}\n          >\n          New message\n        </div>\n\n        {threads.map(thread => (\n          <div key={thread.thread_id}\n            className={selectedThread && thread.thread_id === selectedThread.thread_id ? \"dialog-list-item active\" : \"dialog-list-item\"}\n            onClick={() => this.props.selectThread(thread.thread_id)}\n            >\n            {thread.thread_title}\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { ChatFeed, Message } from 'react-chat-ui'\n\n\nexport default class Dialog extends Component {\n  state = {\n    isTyping: false,\n    messages: [],\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const messages = nextProps.messages.map(item => new Message({\n      id: item.user_id === this.props.me ? 0 : item.user_id,\n      message: item.text || item.item_type,\n    }))\n\n    console.log('me', this.props.me)\n\n    this.setState({\n      messages,\n    })\n  }\n\n  render() {\n    if (this.props.isLoading) {\n      return (<div className=\"dialog\"><h1>Loading...</h1></div>)\n    }\n\n    return (\n      <div>\n        <ChatFeed\n          messages={this.state.messages}\n          isTyping={this.state.isTyping}\n          showSenderName\n          bubblesCentered={false}\n          bubbleStyles={\n            {\n              text: {\n                fontSize: 20\n              },\n              chatbubble: {\n                borderRadius: 30,\n                padding: 20\n              }\n            }\n          }\n          />\n      </div>\n    )\n  }\n}\n","import React, { Fragment, Component } from 'react'\nimport ym from 'react-yandex-metrika'\n\nexport default class SendMessage extends Component {\n  state = {\n    isTyping: false,\n    text: '',\n    username: '',\n  }\n\n  sendMessageRef = React.createRef()\n\n  handleChange = event => {\n    const { name, value } = event.target\n\n    this.setState({\n      [name]: value\n    })\n  }\n\n  submitMessage = event => {\n    event.preventDefault()\n\n    const { text } = this.state\n\n    if (!text) return\n\n    const { selectedThread } = this.props\n\n    if (selectedThread) {\n      this.props.sendMessage({ thread: selectedThread.thread_id }, text)\n      ym('reachGoal', 'dm-message-sent', { thread: selectedThread.thread_id })\n    } else {\n      const { username } = this.state\n\n      this.props.sendMessage({ username }, text)\n      ym('reachGoal', 'dm-message-sent', { username })\n    }\n\n    this.setState({\n      text: ''\n    })\n  }\n\n\n  render() {\n    const { selectedThread } = this.props\n\n    return (\n      <div className=\"dialog-send-message\">\n        <form onSubmit={this.submitMessage}>\n          {!selectedThread && (\n            <Fragment>\n              <input\n                type=\"text\" name=\"username\"\n                placeholder=\"@username\"\n                onChange={this.handleChange}\n                value={this.state.username}\n                />\n            </Fragment>\n          )}\n          <br />\n\n          <input\n            type=\"text\" name=\"text\"\n            className=\"message-text\"\n            onChange={this.handleChange}\n            value={this.state.text}\n            />\n\n          <button onClick={this.submitMessage}>\n            Send\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport { YMInitializer } from 'react-yandex-metrika'\n\nimport instagram from './instagram/connector'\nimport { get_inbox, get_thread, send_direct_item } from './instagram'\n\nimport { List, Dialog, SendMessage } from './components'\n\nclass App extends Component {\n  state = {\n    threads: [],\n    messages: [],\n    selectedThread: null,\n    isLoading: false,\n    autoScroll: true,\n  }\n\n  messagesEnd = React.createRef()\n\n  async componentDidMount() {\n    // window.instagram = instagram\n\n    await instagram.init()\n\n    const { viewer, inbox: { threads } } = await get_inbox()\n\n    console.log('threads', threads)\n\n    const me = viewer.pk\n\n    this.setState({\n      me,\n      threads,\n    })\n    //\n    // const first_thread = threads[0]\n    // this.loadThread(first_thread.thread_id)\n  }\n\n  scrollToBottom = (force = false) => {\n    if (!this.state.autoScroll && !force) return\n\n    const target = this.messagesEnd.current\n\n    target.parentNode.scrollTop = target.offsetTop\n  }\n\n  loadThread = async (thread_id) => {\n    if (!thread_id) {\n      this.setState({\n        isLoading: false,\n        selectedThread: null,\n        messages: [],\n      })\n      return\n    }\n\n    this.setState({ isLoading: true })\n\n    const { thread } = await get_thread(thread_id)\n    const { items } = thread\n\n    console.log('messages', items)\n\n    this.setState({\n      isLoading: false,\n      selectedThread: thread,\n      messages: items.reverse(),\n    }, () => this.scrollToBottom())\n  }\n\n  sendMessage = async (recipient, text) => {\n    this.setState({ isLoading: true })\n\n    console.log('send dm', text)\n\n    const { status } = await send_direct_item(recipient, text)\n\n    if (status !== 'ok') {\n      alert('Error sending: status=' + status)\n    }\n\n    console.log('status', status)\n\n    if (recipient.thread) {\n      this.loadThread(recipient.thread)\n    }\n  }\n\n  render () {\n    const { me, isLoading, threads, selectedThread, messages } = this.state\n\n    return (\n      <div className=\"App\">\n\n        <List\n          threads={threads}\n          selectedThread={selectedThread}\n          selectThread={this.loadThread}\n          />\n\n        <div className=\"dialog\">\n          {!!selectedThread && (\n            <Dialog\n              me={me}\n              isLoading={isLoading}\n              selectedThread={selectedThread}\n              messages={messages}\n              />\n          )}\n\n          <SendMessage\n            selectedThread={selectedThread}\n            sendMessage={this.sendMessage}\n            />\n\n          <div style={{ float: \"left\", clear: \"both\" }}\n            ref={this.messagesEnd}>\n          </div>\n        </div>\n        <YMInitializer accounts={[53083903]} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}