{"version":3,"sources":["logo.svg","List.js","Dialog.js","instagram/connector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","styles","overflowY","height","width","List","_this","this","react_default","a","createElement","style","props","threads","map","thread","key","thread_id","onClick","selectThread","thread_title","Component","Dialog","state","isTyping","messages","nextProps","item","Message","id","item_id","message","text","item_type","sender","user_id","setState","lib","hasInputField","showSenderName","bubblesCentered","bubbleStyles","fontSize","chatbubble","borderRadius","padding","chrome","window","InstagramError","status","arguments","length","undefined","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","concat","Error","TimeoutError","NotInstalledError","connector","_currend_id","_instaweb_dev_id","_instaweb_id","isStopped","isConnected","_check_working_id","Promise","resolve","reject","setTimeout","runtime","sendMessage","_this2","method","_ref3","pong","_ref4","init","_callee","regenerator_default","wrap","_context","prev","next","sent","t0","abrupt","stop","start","kill","request","data","wake","wasWorking","console","log","error","request_generator","_callee2","_ref6","params","limit","_users","generator","_generator$next","users","_args2","_context2","Infinity","page_generator","toConsumableArray","_callee3","_ref7","_params","payload","_ref8","big_list","next_max_id","rest","_context3","awaitAsyncGenerator","objectWithoutProperties","App","loadThread","_ref2","items","instagram","inbox","first_thread","className","src","logo","alt","List_List","Dialog_Dialog","React","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6057fb25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nconst styles = {\n  overflowY: 'scroll',\n  height: '100%',\n  width: '30%',\n}\n\nexport default class List extends Component {\n  render() {\n    return (\n      <div style={styles}>\n        <ul>\n        {this.props.threads.map(thread => (\n          <div key={thread.thread_id} onClick={() => this.props.selectThread(thread)}>\n            {thread.thread_title}\n          </div>\n        ))}\n        </ul>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { ChatFeed, Message } from 'react-chat-ui'\n\nconst styles = {\n  overflowY: 'scroll',\n  width: '65%',\n  height: '100%',\n}\n\nexport default class Dialog extends Component {\n  state = {\n    isTyping: false,\n    messages: [],\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const messages = nextProps.messages.map(item => new Message({\n      id: item.item_id,\n      message: item.text || item.item_type,\n      sender: item.user_id,\n    }))\n\n    this.setState({\n      messages,\n    })\n  }\n\n  render() {\n    return (\n      <div style={styles}>\n        <ChatFeed\n          messages={this.state.messages}\n          isTyping={this.state.isTyping}\n          hasInputField={false}\n          showSenderName\n          bubblesCentered={false}\n          bubbleStyles={\n            {\n              text: {\n                fontSize: 20\n              },\n              chatbubble: {\n                borderRadius: 30,\n                padding: 20\n              }\n            }\n          }\n          />\n      </div>\n    )\n  }\n}\n","const chrome = window.chrome\n\nclass InstagramError extends Error {\n  constructor(status, message = '') {\n    super(message)\n    this.status = status\n\n    this.message = `InstagramError ${status}: ${message}`\n  }\n}\n\nclass TimeoutError extends Error {}\nclass NotInstalledError extends Error {}\n\nclass InstagramConnector {\n  _currend_id = \"\"\n  // _instaweb_dev_id = \"kakgeanaigaghemcjhohikiblgnflbfl\"\n  _instaweb_dev_id = \"jfeioppjmfoialcnpnecpgdajnionodc\"\n  _instaweb_id = \"njonkbhnmmjgancfbncekpgkmidhbbpo\"\n\n  isStopped = false\n  isConnected = false\n\n  _check_working_id = () => new Promise((resolve, reject) => {\n\n    setTimeout(() => reject(new NotInstalledError(`Cant find any working extension`)), 500)\n\n    chrome.runtime.sendMessage(\n      this._instaweb_id,\n      { method: 'ping' }, null,\n      ({ status, pong } = {}) => status === 'ok' && pong && resolve(this._instaweb_id))\n\n    chrome.runtime.sendMessage(\n      this._instaweb_dev_id,\n      { method: 'ping' }, null,\n      ({ status, pong } = {}) => status === 'ok' && pong && resolve(this._instaweb_dev_id))\n\n  })\n\n  init = async () => {\n    try {\n      this._currend_id = await this._check_working_id()\n\n      this.isConnected = true\n    } catch (err) {\n      if (err instanceof TimeoutError) {\n        this.isConnected = false\n        return\n      }\n\n      throw err\n    }\n\n  }\n\n  start = () => this.isStopped = false\n  kill = () => this.isStopped = true\n\n  request = (data, wake = false) => new Promise((resolve, reject) => {\n    const wasWorking = !this.isStopped\n\n    if (wake && !wasWorking) this.start()\n\n    if (this.isStopped) return reject(new Error(`Request was killed`))\n    if (!this.isConnected) return reject(new NotInstalledError())\n\n    setTimeout(() => reject(new TimeoutError(`Request timeout`)), 10000)\n\n    const onResponse = (message) => {\n      if (!message) return reject(new NotInstalledError())\n\n      const { status, error } = message\n\n      console.log('request', data.method, '->', status, message)\n\n      if (status !== 'ok') {\n        reject(new InstagramError(status, error))\n      } else {\n        resolve(message)\n      }\n    }\n\n    console.log(`send_message`, this._currend_id, data)\n    chrome.runtime.sendMessage(this._currend_id, data, null, onResponse)\n\n    if (wake && !wasWorking) this.kill()\n  })\n\n  request_generator = async function * ({ method, params }, limit = Infinity) {\n    let _users = []\n    let generator = this.page_generator({ method, params })\n\n    do {\n      const { users } = generator.next()\n\n      console.log('users', users)\n\n      _users = [ ..._users, ...users ]\n\n      const shouldStop = yield users\n\n      if (shouldStop || _users.length > limit) {\n        return _users\n      }\n\n    } while(true)\n\n  }\n\n  page_generator = async function * ({ method, params }) {\n    let _params = params\n\n    do {\n      const payload = { method, params: _params }\n      const { big_list, next_max_id, ...rest } = await this.request(payload)\n\n      console.log('big_list', big_list, 'next_max_id', next_max_id)\n\n      const shouldStop = yield rest\n\n      if (shouldStop || !next_max_id) {\n        return\n      }\n\n      _params = [ ...params, next_max_id ]\n\n    } while(true)\n\n  }\n\n}\n\nexport default new InstagramConnector()\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport List from './List'\nimport Dialog from './Dialog'\n\nimport instagram from './instagram/connector'\n\nclass App extends React.Component {\n  state = {\n    threads: [],\n    messages: [],\n  }\n\n  async componentDidMount() {\n    window.instagram = instagram\n\n    await instagram.init()\n    const { inbox: { threads } } = await instagram.request({ method: 'get_inbox', params: [] }, true)\n\n    console.log('threads', threads)\n\n    const first_thread = threads[0]\n\n    this.setState({\n      threads,\n    })\n\n    this.loadThread(first_thread)\n  }\n\n  loadThread = async (thread) => {\n    const { thread: { items } } = await instagram.request({ method: 'get_thread', params: [ thread.thread_id ] }, true)\n\n    console.log('messages', items)\n\n    this.setState({\n      messages: items,\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Scroll down to see your inbox\n          </p>\n        </header>\n\n        <List\n          threads={this.state.threads}\n          selectThread={this.loadThread}\n          />\n\n        <Dialog\n          messages={this.state.messages}\n          />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}